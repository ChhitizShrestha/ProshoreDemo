// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace WebAppDemo.ServiceDefaults.Models22;

public partial class test2xluploadContext : DbContext
{
    public test2xluploadContext(DbContextOptions<test2xluploadContext> options)
        : base(options)
    {
    }

    public virtual DbSet<BusinessUnit> BusinessUnits { get; set; }

    public virtual DbSet<BusinessUnitPriceDataSource> BusinessUnitPriceDataSources { get; set; }

    public virtual DbSet<DataSource> DataSources { get; set; }

    public virtual DbSet<DhhBestmixItem> DhhBestmixItems { get; set; }

    public virtual DbSet<DhhBestmixItemLink> DhhBestmixItemLinks { get; set; }

    public virtual DbSet<DhhBusinessStructure> DhhBusinessStructures { get; set; }

    public virtual DbSet<DhhBusinessStructureProductionArea> DhhBusinessStructureProductionAreas { get; set; }

    public virtual DbSet<DhhCountry> DhhCountries { get; set; }

    public virtual DbSet<DhhItem1> DhhItems1 { get; set; }

    public virtual DbSet<DhhPriceTypeConfiguration> DhhPriceTypeConfigurations { get; set; }

    public virtual DbSet<DhhProductionArea> DhhProductionAreas { get; set; }

    public virtual DbSet<Dhhdatum> Dhhdata { get; set; }

    public virtual DbSet<Dhhitem> Dhhitems { get; set; }

    public virtual DbSet<IntDefaultCurrency> IntDefaultCurrencies { get; set; }

    public virtual DbSet<IntHistoricPurchasePrice> IntHistoricPurchasePrices { get; set; }

    public virtual DbSet<Job> Jobs { get; set; }

    public virtual DbSet<JobStatus> JobStatuses { get; set; }

    public virtual DbSet<JobType> JobTypes { get; set; }

    public virtual DbSet<PriceType> PriceTypes { get; set; }

    public virtual DbSet<System> Systems { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<XlpurchasePrice> XlpurchasePrices { get; set; }

    public virtual DbSet<XlpurchasePricesProductionAreasTemp> XlpurchasePricesProductionAreasTemps { get; set; }

    public virtual DbSet<XlpurchasePricesTemp> XlpurchasePricesTemps { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<BusinessUnit>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_XLPP_BusinessUnits_Id");

            entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.CreatedBy).HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.Modified).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.ModifiedBy).HasDefaultValueSql("(suser_sname())");
        });

        modelBuilder.Entity<BusinessUnitPriceDataSource>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Business__3214EC27935C3329");
        });

        modelBuilder.Entity<DataSource>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DataSour__3214EC2751B70F79");
        });

        modelBuilder.Entity<DhhBestmixItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_DHH.BestmixItems");

            entity.HasIndex(e => new { e.Code, e.ImportSourceId }, "UniqueByCodeAndImportSource")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
        });

        modelBuilder.Entity<DhhBestmixItemLink>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_DHH.BestmixItemLinks");

            entity.HasIndex(e => e.BestmixItemId, "IX_BestmixItemId").HasFillFactor(80);

            entity.HasIndex(e => e.ItemId, "IX_ItemId")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.Id).ValueGeneratedNever();
        });

        modelBuilder.Entity<DhhBusinessStructure>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_DHH.BusinessStructures");

            entity.HasIndex(e => e.AuthorizedImportSourceId, "IX_AuthorizedImportSourceId").HasFillFactor(90);

            entity.HasIndex(e => e.CountryId, "IX_CountryId").HasFillFactor(90);

            entity.HasIndex(e => e.ParentStructureId, "IX_ParentStructureId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
        });

        modelBuilder.Entity<DhhBusinessStructureProductionArea>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_DHH.BusinessStructureProductionAreas");

            entity.Property(e => e.Id).ValueGeneratedNever();
        });

        modelBuilder.Entity<DhhCountry>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_DHH.Countries");

            entity.HasIndex(e => e.TwoLettersIsocode, "IX_TwoLettersISOCode")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
        });

        modelBuilder.Entity<DhhItem1>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_DHH.Items");

            entity.HasIndex(e => new { e.Code, e.BusinessStructureId }, "Item_Uniqueness")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
        });

        modelBuilder.Entity<DhhPriceTypeConfiguration>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_DHH.PriceTypeConfigurations");

            entity.Property(e => e.Id).ValueGeneratedNever();
        });

        modelBuilder.Entity<DhhProductionArea>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_DHH.ProductionAreas");

            entity.HasIndex(e => e.ExternalId, "IX_ExternalId")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
        });

        modelBuilder.Entity<Dhhdatum>(entity =>
        {
            entity.ToView("dhhdata");
        });

        modelBuilder.Entity<Dhhitem>(entity =>
        {
            entity.HasIndex(e => e.BusinessStructureId, "IX_dhhitems_BusinessStructureId").HasFillFactor(90);

            entity.Property(e => e.ItemKey).ValueGeneratedNever();
            entity.Property(e => e.ItemGroup).HasDefaultValue("Unassigned");
            entity.Property(e => e.ItemGroupCode).HasDefaultValue("Unassigned");
        });

        modelBuilder.Entity<IntDefaultCurrency>(entity =>
        {
            entity.ToView("IntDefaultCurrencies");
        });

        modelBuilder.Entity<Job>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_XLPP_Jobs_Id");

            entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.CreatedBy).HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.Modified).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.ModifiedBy).HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.StartDate).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.BusinessUnit).WithMany(p => p.Jobs)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_XLPP_Jobs_BusinessUnitId");

            entity.HasOne(d => d.JobStatus).WithMany(p => p.Jobs)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_XLPP_Jobs_JobStatusId");

            entity.HasOne(d => d.JobType).WithMany(p => p.Jobs)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_XLPP_Jobs_JobTypeId");
        });

        modelBuilder.Entity<JobStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_XLPP_JobStatus_Id");
        });

        modelBuilder.Entity<JobType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_XLPP_JobType_Id");
        });

        modelBuilder.Entity<PriceType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PriceTyp__3214EC27D84BC34D");
        });

        modelBuilder.Entity<System>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_XLPP_Systems_Id");

            entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.CreatedBy).HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.Modified).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.ModifiedBy).HasDefaultValueSql("(suser_sname())");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_XLPP_Users_Id");

            entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.CreatedBy).HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.LastAccessDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.Modified).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.ModifiedBy).HasDefaultValueSql("(suser_sname())");

            entity.HasOne(d => d.DefaultBusinessUnit).WithMany(p => p.Users).HasConstraintName("FK_XLPP_Users_DefaultBusinessUnitId");
        });

        modelBuilder.Entity<XlpurchasePrice>(entity =>
        {
            entity.Property(e => e.XlpurchasePriceId).ValueGeneratedNever();
            entity.Property(e => e.WeekNumber).IsFixedLength();
            entity.Property(e => e.YearMonth).IsFixedLength();
        });

        modelBuilder.Entity<XlpurchasePricesTemp>(entity =>
        {
            entity.Property(e => e.XlpurchasePriceId).ValueGeneratedNever();
            entity.Property(e => e.WeekNumber).IsFixedLength();
            entity.Property(e => e.YearMonth).IsFixedLength();
        });

        OnModelCreatingGeneratedFunctions(modelBuilder);
        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}