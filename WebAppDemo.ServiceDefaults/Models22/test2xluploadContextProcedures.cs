// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using WebAppDemo.ServiceDefaults.Models22;

namespace WebAppDemo.ServiceDefaults.Models22
{
    public partial class test2xluploadContext
    {
        private Itest2xluploadContextProcedures _procedures;

        public virtual Itest2xluploadContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new test2xluploadContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public Itest2xluploadContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class test2xluploadContextProcedures : Itest2xluploadContextProcedures
    {
        private readonly test2xluploadContext _context;

        public test2xluploadContextProcedures(test2xluploadContext context)
        {
            _context = context;
        }

        public virtual async Task<List<getBuTemplateDataResult>> getBuTemplateDataAsync(string BuName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BuName",
                    Size = -1,
                    Value = BuName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<getBuTemplateDataResult>("EXEC @returnValue = [dbo].[getBuTemplateData] @BuName = @BuName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<getBuTemplateData2Result>> getBuTemplateData2Async(string BuName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BuName",
                    Size = -1,
                    Value = BuName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<getBuTemplateData2Result>("EXEC @returnValue = [dbo].[getBuTemplateData2] @BuName = @BuName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<getUploadedXLPurchasePriceHeadersResult>> getUploadedXLPurchasePriceHeadersAsync(int? daysBack, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "daysBack",
                    Value = daysBack ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<getUploadedXLPurchasePriceHeadersResult>("EXEC @returnValue = [dbo].[getUploadedXLPurchasePriceHeaders] @daysBack = @daysBack", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> mergeXLPurchasePricesAsync(string FileName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FileName",
                    Size = 520,
                    Value = FileName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[mergeXLPurchasePrices] @FileName = @FileName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
